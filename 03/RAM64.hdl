// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM64.hdl
/**
 * Memory of sixty four 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM64 {
    IN in[16], load, 
        address[6]; // 6 bits; can represent 0-63 indexed registers; a total of of 64 registers
    OUT out[16];

    PARTS:
        DMux8Way(in=load, sel=address[0..2], a=load0, b=load1, c=load2, d=load3, e=load4, f=load5, g=load6, h=load7);
        RAM8(in=in, load=load0, address=address[3..5], out=ram0);
        RAM8(in=in, load=load1, address=address[3..5], out=ram1);
        RAM8(in=in, load=load2, address=address[3..5], out=ram2);
        RAM8(in=in, load=load3, address=address[3..5], out=ram3);
        RAM8(in=in, load=load4, address=address[3..5], out=ram4);
        RAM8(in=in, load=load5, address=address[3..5], out=ram5);
        RAM8(in=in, load=load6, address=address[3..5], out=ram6);
        RAM8(in=in, load=load7, address=address[3..5], out=ram7);
        Mux8Way16(a=ram0, b=ram1, c=ram2, d=ram3, e=ram4, f=ram5, g=ram6, h=ram7, sel=address[0..2], out=out);
}

/* CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h:
 * [a, b, c, d, e, f, g, h] = [in, 0,  0,  0,  0,  0,  0,  0] if sel = 000
 *                            [0, in,  0,  0,  0,  0,  0,  0] if sel = 001
 *                            [0,  0, in,  0,  0,  0,  0,  0] if sel = 010
 *                            [0,  0,  0, in,  0,  0,  0,  0] if sel = 011
 *                            [0,  0,  0,  0, in,  0,  0,  0] if sel = 100
 *                            [0,  0,  0,  0,  0, in,  0,  0] if sel = 101
 *                            [0,  0,  0,  0,  0,  0, in,  0] if sel = 110
 *                            [0,  0,  0,  0,  0,  0,  0, in] if sel = 111
*/
